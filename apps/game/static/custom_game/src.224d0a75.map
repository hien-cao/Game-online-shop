{"version":3,"sources":["src/controls/keyboardListener.ts","src/controls/MouseListener.ts","src/sprites/projectile.ts","src/sprites/Sprite.ts","src/entities/GameObject.ts","src/entities/Meteor.ts","src/entities/Ship.ts","src/entities/Player.ts","src/entities/Projectile.ts","src/entities/Weapon.ts","src/controls/Button.ts","src/interface/Overlay.ts","src/interface/End.ts","src/interface/Pause.ts","src/interface/UserInterface.ts","src/Viewport.ts","src/zones/Zone.ts","src/zones/SpawnZone.ts","src/zones/zones.ts","src/Game.ts","src/index.ts"],"names":[],"mappings":"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","file":"src.224d0a75.map","sourceRoot":"..","sourcesContent":["export interface KeyState {\n  [key: string]: boolean;\n}\n\nexport default class KeyboardListener {\n  public keyState: KeyState = {}; // initialize empty keystate helper\n\n  public mount = () => {\n    document.addEventListener(\n      \"keydown\",\n      this.onKeyDownHandler,\n      false\n    );\n    document.addEventListener(\n      \"keyup\",\n      this.onKeyUpHandler,\n      false\n    );\n  }\n\n  public unmount = () => {\n    document.removeEventListener(\"keydown\", this.onKeyDownHandler);\n    document.removeEventListener(\"keyup\", this.onKeyUpHandler);\n  }\n\n  private onKeyDownHandler = (e: KeyboardEvent) => {\n    this.keyState[e.key] = true;\n  }\n\n  private onKeyUpHandler = (e: KeyboardEvent) => {\n    this.keyState[e.key] = false;\n  }\n}\n","export default class MouseListener {\n  public x: number = 0;\n  public y: number = 0;\n\n  public mouseDown = false;\n  public mouseClick?: number;\n\n  public mount = (gameContainer: HTMLElement) => {\n    gameContainer.addEventListener(\n      \"mousemove\",\n      this.handleMouseMove,\n      false\n    );\n    gameContainer.addEventListener(\n      \"mousedown\",\n      this.handleMouseDown,\n      false\n    );\n    gameContainer.addEventListener(\n      \"mouseup\",\n      this.handleMouseUp,\n      false\n    );\n  }\n\n  public unmount = (gameContainer: HTMLElement) => {\n    gameContainer.removeEventListener(\"mousemove\", this.handleMouseMove);\n    gameContainer.removeEventListener(\"mousedown\", this.handleMouseDown);\n    gameContainer.removeEventListener(\"mouseup\", this.handleMouseUp);\n  }\n\n  private handleMouseMove = (e: MouseEvent) => {\n    this.x = e.offsetX;\n    this.y = e.offsetY;\n  }\n\n  private handleMouseDown = (e: MouseEvent) => {\n    this.mouseDown = true;\n    this.mouseClick = this.mouseClick || Date.now();\n  }\n\n  private handleMouseUp = (e: MouseEvent) => {\n    this.mouseDown = false;\n    this.mouseClick = undefined;\n  }\n}\n","const projectile = document.createElement(\"canvas\");\nprojectile.width = 4;\nprojectile.height = 3;\nconst ctx = projectile.getContext(\"2d\") as CanvasRenderingContext2D;\nctx.fillStyle = \"#CCC\";\nctx.fillRect(0, 0, 4, 3);\n\nexport default projectile;\n","import ship from \"../../static/images/ship.svg\";\nimport projectile from \"./projectile\";\n\ntype ImageSource = HTMLImageElement | HTMLCanvasElement;\n\nexport default class Sprite {\n  public img: ImageSource = new Image();\n\n  constructor(img: ImageSource | string) {\n    if (typeof img === \"string\") {\n      this.img = new Image();\n      this.img.src = img;\n    } else {\n      this.img = img;\n    }\n  }\n\n  public render = (\n    ctx: CanvasRenderingContext2D,\n    x: number,\n    y: number,\n    width = this.img.width,\n    height = this.img.height\n  ) => {\n    ctx.drawImage(this.img, ~~x, ~~y, width, height);\n  }\n}\n\nexport const sprites: { [key: string]: Sprite } = {\n  projectile: new Sprite(projectile),\n  ship: new Sprite(ship),\n};\n","import Game from \"../Game\";\nimport Sprite from \"../sprites/Sprite\";\nimport Viewport from \"../ViewPort\";\n\nexport const globalSpeedModifier = 20;\n\nexport interface GameObjectArgs {\n  sprite?: Sprite;\n  scale?: number;\n  initialWidth?: number;\n  initialHeight?: number;\n  x?: number;\n  y?: number;\n  velocity?: vector;\n  maxVelocity?: vector;\n  minVelocity?: vector;\n  maxLife: number;\n  onUpdate?: Array<(d: number, game: Game) => any>;\n}\n\nexport interface GameObjectState {\n  type: string;\n  x: number;\n  y: number;\n  velocity: vector;\n  maxLife: number;\n  life: number;\n}\n\nexport default abstract class GameObject {\n  get sprite() {\n    return this._sprite;\n  }\n  set sprite(sprite: Sprite | undefined) {\n    this._sprite = sprite;\n    this.rescale(this.scale);\n  }\n\n  public scale: number;\n  public x: number;\n  public y: number;\n  public acceleration: vector = [0, 0];\n  public velocity: vector = [0, 0];\n  public maxVelocity?: vector;\n  public minVelocity?: vector;\n  public immuneTo?: GameObject[];\n\n  public onUpdate?: Array<(d: number, game: Game) => any>;\n\n  public width: number = 0;\n  public height: number = 0;\n\n  // Life determines damage caused upon collosion\n  // An object will trigger\n  public life: number;\n  public maxLife: number;\n\n  private _sprite?: Sprite;\n\n  constructor({\n    sprite,\n    initialWidth = 1,\n    initialHeight = 1,\n    scale = 1,\n    x = 0,\n    y = 0,\n    maxLife = 1,\n    velocity = [0, 0],\n    maxVelocity,\n    minVelocity,\n  }: GameObjectArgs) {\n    this.sprite = sprite;\n\n    this.width = initialWidth;\n    this.height = initialHeight;\n\n    this.x = x;\n    this.y = y;\n\n    this.maxLife = Math.floor(maxLife);\n    this.life = this.maxLife;\n\n    this.velocity = velocity;\n    this.maxVelocity = maxVelocity;\n    this.minVelocity = minVelocity;\n\n    this.scale = scale;\n\n    if (this._sprite) {\n      this._sprite.img.onload = () => this.rescale(scale); // to update dimensions after image has been loaded\n      this.rescale(scale);\n    }\n  }\n\n  public rescale = (scale: number) => {\n    if (typeof this.sprite === \"undefined\") {\n      return;\n    }\n    const width = (this.sprite.img.width as number) * scale;\n    const height = width * (this.sprite.img.height as number) / (this.sprite.img.width as number);\n\n    if (!isNaN(width) && !isNaN(height)) {\n      this.width = width;\n      this.height = height;\n    }\n  }\n\n  public getDistance = (obj: Trackable) => Math.sqrt(\n    Math.pow(this.x - obj.x, 2) + Math.pow(this.y - obj.y, 2)\n  )\n\n  public collides = (obj: GameObject) => (\n    obj.x + obj.width > this.x && obj.x < this.x + this.width &&\n    obj.y + obj.height > this.y && obj.y < this.y + this.height\n  )\n\n  public update = (d: number, game: Game, objIndex: number) => {\n    this.updatePosition(d);\n\n    // loop and invoke all update listeners\n    if (Array.isArray(this.onUpdate)) {\n      for (const notify of this.onUpdate) {\n        notify(d, game);\n      }\n    }\n\n    if (this.life <= 0) {\n      this.life = 0;\n      return this.destroy(game, objIndex);\n    }\n    // check for collisions\n    const collision = this.checkCollisions(game, objIndex);\n    if (collision) {\n      const damage = collision.life;\n      collision.life -= this.life;\n      this.life -= damage;\n\n      if (collision.life <= 0 && this.source === game.player) { // increment score on succesful kill\n        game.score += collision.maxLife * 1.2;\n      }\n    }\n  }\n\n  public render = (ctx: CanvasRenderingContext2D, viewport: Viewport, scale = 1) =>\n    this.sprite && this.sprite.render(\n      ctx,\n      this.x - viewport.x,\n      this.y - viewport.y,\n      this.width,\n      this.height\n    )\n\n  get state(): GameObjectState {\n    return {\n      life: this.life,\n      maxLife: this.maxLife,\n      type: this.constructor.name,\n      velocity: this.velocity,\n      x: this.x,\n      y: this.y,\n    };\n  }\n\n  set state(state: GameObjectState) {\n    Object.assign(this, state);\n  }\n\n  protected destroy = (game: Game, objIndex: number) => {\n    const obj = game.gameObjects[objIndex];\n    this.velocity = [0, 0];\n    if (typeof obj.onDestroy === \"function\") {\n      obj.onDestroy(game);\n    }\n    game.gameObjects.splice(objIndex, 1);\n  }\n\n  protected onDestroy?(game: Game): any;\n\n  private checkCollisions = (game: Game, objIndex: number): GameObject | null => {\n    // loop through non-checked game objects\n    while (objIndex--) {\n      if (\n        !(Array.isArray(this.immuneTo) && this.immuneTo.find((obj) => obj === game.gameObjects[objIndex])) &&\n        this.collides(game.gameObjects[objIndex])\n      ) {\n        return game.gameObjects[objIndex];\n      }\n    }\n    return null;\n  }\n\n  private readonly updatePosition = (d: number) => {\n    this.x += this.velocity[0] * d * globalSpeedModifier;\n    this.y += this.velocity[1] * d * globalSpeedModifier;\n\n    this.velocity[0] += this.acceleration[0] * d * globalSpeedModifier;\n    this.velocity[1] += this.acceleration[1] * d * globalSpeedModifier;\n\n    if (this.minVelocity) {\n      this.velocity[0] = Math.max(this.minVelocity[0], this.velocity[0]);\n      this.velocity[1] = Math.max(this.minVelocity[1], this.velocity[1]);\n    }\n    if (this.maxVelocity) {\n      this.velocity[0] = Math.min(this.maxVelocity[0], this.velocity[0]);\n      this.velocity[1] = Math.min(this.maxVelocity[1], this.velocity[1]);\n    }\n  }\n}\n","import Game from \"../Game\";\nimport Sprite from \"../sprites/Sprite\";\nimport GameObject, { GameObjectArgs } from \"./GameObject\";\n\nexport interface MeteorArgs extends GameObjectArgs {\n  radius?: number;\n}\n\nexport default class Meteor extends GameObject {\n  public static generateSprite(radius: number) {\n    const n = 3 + Math.random() * Math.sqrt(radius); // number of verices\n    const sprite = document.createElement(\"canvas\");\n    sprite.width = radius * 2;\n    sprite.height = radius * 2;\n    const ctx = sprite.getContext(\"2d\") as CanvasRenderingContext2D;\n\n    const step = 2 * Math.PI / n;\n\n    ctx.beginPath();\n    ctx.moveTo(\n      Math.random() * .1 * radius + radius * 2,\n      Math.random() * .1 * radius + radius\n    );\n    for (let i = 0; i < n; i++) {\n      ctx.lineTo(\n        (Math.random() * .1 * radius) + (radius + Math.cos(i * step) * radius),\n        (Math.random() * .1 * radius) + (radius + Math.sin(i * step) * radius)\n      );\n    }\n    ctx.closePath();\n    ctx.fillStyle = \"#CCC\";\n    ctx.fill();\n    ctx.rotate(Math.random() * Math.PI);\n\n    return sprite;\n  }\n\n  public radius: number;\n\n  constructor({ radius, ...args }: MeteorArgs) {\n    super(args);\n    this.radius = this.maxLife * 2.5;\n    this.sprite = new Sprite(Meteor.generateSprite(this.radius));\n  }\n\n  public getDistance = (obj: Trackable): number => Math.sqrt(obj instanceof Meteor ?\n    (\n      Math.pow(this.x + this.radius - (obj.x + obj.radius), 2) +\n      Math.pow(this.y + this.radius - (obj.y + obj.radius), 2)\n    ) : (\n      Math.pow(this.x - obj.x, 2) +\n      Math.pow(this.y - obj.y, 2)\n    )\n  )\n\n  public collides = (obj: GameObject): boolean => obj instanceof Meteor ?\n    (\n      this.getDistance(obj) < obj.radius + this.radius\n    ) : (\n      obj.x + obj.width > this.x && obj.x < this.x + this.width &&\n      obj.y + obj.height > this.y && obj.y < this.y + this.height\n    )\n\n  protected onDestroy(game: Game) {\n    if (this.maxLife < 5) {\n      return;\n    }\n    const m1 = new Meteor({\n      maxLife: this.maxLife / 2,\n      velocity: [this.velocity[0] + .5 - Math.random(), Math.min(this.velocity[1], 0) - 2 * Math.random()],\n      x: this.x + this.radius,\n      y: this.y + this.radius - 5,\n    });\n    const m2 = new Meteor({\n      maxLife: this.maxLife / 2,\n      velocity: [this.velocity[0] + .5 - Math.random(), Math.max(this.velocity[1], 0) + 2 * Math.random()],\n      x: this.x + this.radius,\n      y: this.y + this.radius + 5,\n    });\n\n    // splitted meteors should not be able to destroy eachother\n    m1.immuneTo = [m2];\n    m2.immuneTo = [m1];\n\n    game.addGameObject(m1);\n    game.addGameObject(m2);\n  }\n}\n","import GameObject, { GameObjectArgs } from \"./GameObject\";\nimport Weapon from \"./Weapon\";\n\nexport interface ShipArgs extends GameObjectArgs {\n  weapon?: Weapon;\n  shield?: number;\n  maxVelocity?: vector;\n  minVelocity?: vector;\n}\n\nexport default class Ship extends GameObject {\n  public weapon?: Weapon;\n  public maxVelocity: vector;\n  public minVelocity: vector;\n  public shield: number;\n\n  constructor({ weapon, minVelocity = [10, 10], maxVelocity = [10, 10], shield = 0, ...args }: ShipArgs) {\n    super(args);\n    this.minVelocity = minVelocity;\n    this.maxVelocity = maxVelocity;\n    this.shield = shield;\n    this.weapon = weapon;\n  }\n}\n","import Game from \"../game\";\nimport Ship, { ShipArgs } from \"./Ship\";\n\nexport default class Player extends Ship {\n  constructor(args: ShipArgs) {\n    super(args);\n    // add controls\n    this.onUpdate = [\n      (d, game: Game) => {\n        game.score += .01 * Math.sqrt(this.velocity[0] * this.velocity[0] + this.velocity[1] * this.velocity[1]);\n      },\n      (d, game: Game) => {\n        this.acceleration[0] = 0;\n        this.acceleration[1] = 0;\n        if (game.keyboard.keyState.w) {\n          this.acceleration[1] -= 1;\n        }\n        if (game.keyboard.keyState.a) {\n          this.acceleration[0] -= 1;\n        }\n        if (game.keyboard.keyState.s) {\n          this.acceleration[1] += 1;\n        }\n        if (game.keyboard.keyState.d) {\n          this.acceleration[0] += 1;\n        }\n        if (this.weapon && game.keyboard.keyState[\" \"]) {\n          this.weapon.fire(this, game);\n        }\n      },\n    ];\n  }\n\n  public onDestroy(game: Game) {\n    game.setOverlay(game.overlays.end);\n  }\n}\n","import GameObject, { GameObjectArgs } from \"./GameObject\";\n\nexport interface ProjectileArgs extends GameObjectArgs {\n  source?: GameObject;\n}\n\nexport default class Projectile extends GameObject {\n  public source?: GameObject;\n\n  constructor({ source, ...args }: ProjectileArgs) {\n    super(args);\n    this.source = source;\n  }\n\n  public collides = (obj: GameObject) => (\n    this.source !== obj &&\n    obj.x + obj.width > this.x && obj.x < this.x + this.width &&\n    obj.y + obj.height > this.y && obj.y < this.y + this.height\n  )\n}\n","import Game from \"../game\";\nimport Sprite from \"../sprites/Sprite\";\nimport GameObject from \"./GameObject\";\nimport Projectile from \"./Projectile\";\nimport Ship from \"./Ship\";\n\nexport interface WeaponArgs {\n  fireRate: number;\n  ballisticVelocity?: number;\n  lastFire?: number;\n  offset?: xy;\n  ship?: Ship;\n  projectileSettings: ProjectileSettings;\n}\n\nexport interface ProjectileSettings {\n  damage: number;\n  sprite: Sprite;\n}\n\nexport default class Weapon {\n  public fireRate: number;\n  public lastFire: number;\n  public ballisticVelocity: number;\n  public offset: xy;\n  public ship?: Ship;\n  public projectileSettings: ProjectileSettings;\n\n  constructor({\n    fireRate,\n    projectileSettings,\n    ballisticVelocity = 25,\n    lastFire = 0,\n    ship,\n    offset = [0, 0],\n  }: WeaponArgs) {\n    this.fireRate = fireRate;\n    this.lastFire = lastFire;\n    this.ballisticVelocity = ballisticVelocity;\n    this.projectileSettings = projectileSettings;\n    this.offset = offset;\n    this.ship = ship;\n  }\n\n  public fire = (obj: GameObject, game: Game) => {\n    if (this.ship && game.prevLoop - this.lastFire > 1000 / this.fireRate) {\n      this.lastFire = Date.now();\n      const projectile = new Projectile({\n        maxLife: this.projectileSettings.damage,\n        source: this.ship,\n        sprite: this.projectileSettings.sprite,\n      });\n      projectile.x = obj.x + this.offset[0] - obj.velocity[0];\n      projectile.y = obj.y + this.offset[1] - obj.velocity[1];\n      projectile.velocity = [obj.velocity[0] + this.ballisticVelocity, obj.velocity[1]];\n\n      game.addGameObject(projectile);\n    }\n  }\n}\n","import MouseListener from \"./MouseListener\";\n\nexport interface ButtonArgs {\n  label: string;\n  x: number;\n  y: number;\n  font: string;\n  onClick(): any;\n}\n\nexport class Button {\n  public isActive: boolean = false;\n  public onClick: () => any;\n  public label: string;\n  public width: number;\n  public height: number;\n  public prevClick?: number;\n  public canvas: HTMLCanvasElement;\n  public font = \"12px Arial, Helvetica, sans-serif\";\n\n  private _x: number;\n  get x() {\n    return this._x;\n  }\n  set x(x: number) {\n    this._x = x;\n    this.bounds.l = x;\n    this.bounds.r = x + this.width;\n  }\n\n  private _y: number;\n  get y() {\n    return this._y;\n  }\n  set y(y: number) {\n    this._y = y;\n    this.bounds.t = y;\n    this.bounds.b = y + this.height;\n  }\n\n  private bounds: Bounds;\n\n  constructor({ label, font, onClick, x, y }: ButtonArgs) {\n    this.label = label;\n    this._x = x;\n    this._y = y;\n    this.font = font;\n    this.onClick = onClick;\n\n    this.canvas = document.createElement(\"canvas\");\n    const ctx = this.canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n\n    ctx.font = this.font;\n    this.width = ctx.measureText(this.label).width;\n    this.height = parseInt(this.font, 10) * 1.3;\n    this.canvas.width = this.width;\n    this.canvas.height = this.height;\n    ctx.font = this.font;\n    ctx.fillStyle = \"#eee\";\n    ctx.fillText(this.label, 0, this.canvas.height / 1.3);\n\n    this.bounds = {\n      b: this._y + this.height,\n      l: this._x,\n      r: this._x + this.width,\n      t: this._y,\n    };\n\n  }\n\n  public update = (mouse: MouseListener) => {\n    this.isActive = (\n      mouse.x > this.bounds.l && mouse.x < this.bounds.r &&\n      mouse.y > this.bounds.t && mouse.y < this.bounds.b\n    );\n    if (\n      this.isActive &&\n      mouse.mouseClick && this.prevClick !== mouse.mouseClick &&\n      typeof this.onClick === \"function\"\n    ) {\n      this.prevClick = mouse.mouseClick;\n      this.onClick();\n    }\n  }\n\n  public render = (ctx: CanvasRenderingContext2D) => {\n    ctx.drawImage(this.canvas, this._x, this._y);\n  }\n}\n","import KeyboardListener from \"../controls/keyboardListener\";\nimport MouseListener from \"../controls/MouseListener\";\n\nexport interface OverlayArgs {\n  width: number;\n  height: number;\n  onExit?(): any;\n}\n\nexport interface OverlayUpdateState {\n  mouse: MouseListener;\n  keyboard: KeyboardListener;\n}\n\nexport default abstract class Overlay {\n  public rendered = false;\n  public onExit?: () => any;\n  public canvas: HTMLCanvasElement;\n  public prevState: any = {};\n\n  constructor({ width, height, onExit }: OverlayArgs) {\n    this.canvas = document.createElement(\"canvas\");\n    this.canvas.width = width;\n    this.canvas.height = height;\n    this.onExit = onExit;\n    this.canvas.id = \"overlay\";\n  }\n\n  public exit = () => typeof this.onExit === \"function\" && this.onExit();\n\n  public abstract render(state?: any): any;\n  public abstract update?(state: OverlayUpdateState): any;\n}\n","import { Button } from \"../controls/Button\";\nimport Game from \"../Game\";\nimport Overlay, { OverlayUpdateState } from \"./Overlay\";\n\nexport interface EndArgs {\n  game: Game;\n}\n\nexport default class End extends Overlay {\n  public prevState: {\n    buttons: Button[]\n  };\n\n  constructor({ game, ...args }: EndArgs) {\n    super({\n      ...args,\n      height: game.canvas.height,\n      width: game.canvas.width,\n    });\n\n    const restartButton = new Button({\n      font: \"16px Arial, Helvetica, sans-serif\",\n      label: \"Restart Game\",\n      onClick: () => game.reset(),\n      x: 0,\n      y: this.canvas.height / 2,\n    });\n    restartButton.x = this.canvas.width / 2 - restartButton.width / 2;\n    const highScoreButton = new Button({\n      font: \"18px Arial, Helvetica, sans-serif\",\n      label: \"Submit score\",\n      onClick: () => {\n        parent.postMessage({\n          messageType: \"SCORE\",\n          score: game.score,\n        }, window.location.href);\n      },\n      x: 0,\n      y: this.canvas.height - 40,\n    });\n    highScoreButton.x = this.canvas.width / 2 - highScoreButton.width / 2;\n\n    this.prevState = {\n      buttons: [\n        restartButton,\n        highScoreButton,\n      ],\n    };\n  }\n\n  public render = () => {\n    if (this.rendered) {\n      return; // no need to re-render\n    }\n    const ctx = this.canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n    ctx.fillStyle = \"rgba(0, 0, 0, .5)\";\n\n    ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n\n    ctx.font = \"10px Arial, Helvetica, sans-serif\";\n    ctx.textAlign = \"center\";\n    ctx.fillStyle = \"#eee\";\n    ctx.fillText(\n      \"Your journey ended in the vast space,\",\n      this.canvas.width / 2,\n      this.canvas.height / 2 - 48\n    );\n    ctx.fillText(\n      \"where the fragments of your ship fill float until the end of the time.\",\n      this.canvas.width / 2,\n      this.canvas.height / 2 - 30\n    );\n    ctx.fillText(\n      \"You can only hope that your journey was not made in vain, and someone will hear of your heroic exploits\",\n      this.canvas.width / 2,\n      this.canvas.height - 60\n    );\n\n    for (const button of this.prevState.buttons) {\n      button.render(ctx);\n    }\n\n    this.rendered = true;\n  }\n\n  public update = ({ mouse, keyboard }: OverlayUpdateState) => {\n    for (const button of this.prevState.buttons) {\n      button.update(mouse);\n    }\n  }\n}\n","import { Button } from \"../controls/Button\";\nimport Game from \"../Game\";\nimport Overlay, { OverlayUpdateState } from \"./Overlay\";\n\nexport interface PauseArgs {\n  game: Game;\n  onExit(): any;\n}\n\nexport default class Pause extends Overlay {\n  public prevState: {\n    buttons: Button[]\n  };\n\n  constructor({ game, ...args }: PauseArgs) {\n    super({\n      ...args,\n      height: game.canvas.height,\n      width: game.canvas.width,\n    });\n\n    const saveButton = new Button({\n      font: \"14px Arial, Helvetica, sans-serif\",\n      label: \"Save game\",\n      onClick: () => game.save(),\n      x: 5,\n      y: this.canvas.height - 20,\n    });\n    const loadButton = new Button({\n      font: \"14px Arial, Helvetica, sans-serif\",\n      label: \"Load game\",\n      onClick: () => game.requestLoad(),\n      x: 0,\n      y: this.canvas.height - 20,\n    });\n    loadButton.x = this.canvas.width - 5 - loadButton.width;\n\n    this.prevState = {\n      buttons: [\n        saveButton,\n        loadButton,\n      ],\n    };\n  }\n\n  public render = () => {\n    if (this.rendered) {\n      return; // no need to re-render\n    }\n    const ctx = this.canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n    ctx.fillStyle = \"rgba(0, 0, 0, .5)\";\n\n    ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n\n    ctx.font = \"16px Arial, Helvetica, sans-serif\";\n    ctx.textAlign = \"center\";\n    ctx.fillStyle = \"#eee\";\n    ctx.fillText(\"Movement: WASD\", this.canvas.width / 2, this.canvas.height / 2 - 32);\n    ctx.fillText(\"Shoot: space\", this.canvas.width / 2, this.canvas.height / 2);\n    ctx.font = \"10px Arial, Helvetica, sans-serif\";\n    ctx.fillText(\"Press space or movement keys to unpause\", this.canvas.width / 2, this.canvas.height / 2 + 28);\n\n    for (const button of this.prevState.buttons) {\n      button.render(ctx);\n    }\n\n    this.rendered = true;\n  }\n\n  public update = ({ mouse, keyboard }: OverlayUpdateState) => {\n    for (const button of this.prevState.buttons) {\n      button.update(mouse);\n    }\n    for (const key of \" wasd\") {\n      if (keyboard.keyState[key]) {\n        this.exit();\n      }\n    }\n  }\n}\n","import { Button } from \"../controls/Button\";\nimport { globalSpeedModifier } from \"../entities/GameObject\";\nimport Overlay, { OverlayArgs, OverlayUpdateState } from \"./Overlay\";\n\nexport interface GameState {\n  x: number;\n  y: number;\n  velocity: vector;\n  life: number;\n  maxLife: number;\n  score: number;\n}\n\nexport interface UserInterfaceArgs extends OverlayArgs {\n  pause(): any;\n}\n\nexport default class UserInterface extends Overlay {\n  private pauseButton: Button;\n\n  constructor({ pause, ...args }: UserInterfaceArgs) {\n    super(args);\n    const pauseButton = new Button({\n      font: \"14px Arial, Helvetica, sans-serif\",\n      label: \"Click here to pause\",\n      onClick: pause,\n      x: 5,\n      y: 0,\n    });\n    pauseButton.y = this.canvas.height - 5 - pauseButton.height;\n    this.pauseButton = pauseButton;\n  }\n\n  public update = ({ mouse }: OverlayUpdateState) => this.pauseButton.update(mouse);\n\n  public render = (state: GameState) => {\n    if (JSON.stringify(this.prevState) === JSON.stringify(state)) {\n      return; // no need to re-render if no updates\n    }\n    const ctx = this.canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n    ctx.restore();\n\n    // hitpoints bar\n    if (!this.prevState || this.prevState.life !== state.life || this.prevState.maxLife !== state.maxLife) {\n      ctx.font = \"10px Arial, Helvetica, sans-serif\";\n      ctx.strokeStyle = \"#555\";\n      ctx.rect(2, 2, 102, 14); // hp background\n      ctx.stroke();\n      ctx.fillStyle = \"#333\";\n      ctx.fillRect(3, 3, 100, 12); // hp\n      ctx.fillStyle = \"#e05\";\n      ctx.fillRect(3, 3, 100 * state.life / state.maxLife, 12); // hp\n\n      ctx.fillStyle = \"#eee\";\n      ctx.textAlign = \"center\";\n      ctx.fillText(`${state.life} / ${state.maxLife}`, 3 + 100 / 2, 11);\n    }\n\n    ctx.font = \"12px Arial, Helvetica, sans-serif\";\n    // Score\n    const score = `Score: ${Math.floor(state.score)}`;\n    let w = ctx.measureText(score).width;\n    ctx.clearRect(this.canvas.width - 20 - w, 0, w + 20, 14);\n    ctx.textAlign = \"right\";\n    ctx.fillText(score, this.canvas.width - 5, 12);\n\n    // info\n    const coordinates = `Coordinates: (${\n      Math.floor(state.x / globalSpeedModifier)\n      }, ${\n      Math.floor(state.y / globalSpeedModifier)\n      })`;\n    const velocity = `Velocity: (${Math.floor(state.velocity[0])}, ${Math.floor(state.velocity[1])})`;\n    w = Math.max(ctx.measureText(coordinates).width, ctx.measureText(velocity).width);\n    ctx.clearRect(this.canvas.width - 10 - w, this.canvas.height - 32, w + 10, 32);\n    ctx.fillText(\n      coordinates,\n      this.canvas.width - 5,\n      this.canvas.height - 5\n    );\n    ctx.fillText(\n      velocity,\n      this.canvas.width - 5,\n      this.canvas.height - 20\n    );\n\n    if (!this.rendered) {\n      this.pauseButton.render(ctx);\n    }\n\n    ctx.save();\n    this.prevState = state;\n\n    this.rendered = true;\n  }\n}\n","import GameObject, { globalSpeedModifier } from \"./entities/GameObject\";\n\nexport default class Viewport {\n  public width: number;\n  public height: number;\n  public x: number;\n  public y: number;\n  public target?: Trackable;\n  public targetOffset = [0, 0];\n\n  constructor(width: number, height: number, x = 0, y = 0) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.width = width;\n    this.height = height;\n  }\n\n  public resize(width: number, height: number) {\n    this.width = width;\n    this.height = height;\n  }\n\n  public translate(x: number, y: number) {\n    this.x = this.x + x;\n    this.y = this.y + y;\n  }\n\n  public pan = (obj: Trackable, offset = [0, 0], d: number = 0, instant = false) => {\n    if (instant) {\n      this.x = obj.x + this.width / 2 + offset[0];\n      this.y = obj.y - this.height / 2 + offset[1];\n    } else {\n      this.target = obj;\n      this.targetOffset = offset;\n    }\n    this.update(d);\n  }\n\n  public update = (d: number) => {\n    if (typeof this.target === \"undefined\") {\n      return;\n    }\n    const { x, y, velocity } = this.target;\n    const targetX = x + this.width / 2 + this.targetOffset[0];\n    const targetY = y - this.height / 2 + this.targetOffset[1];\n    if (targetX !== this.x) {\n      this.x += Math.sign(targetX - this.x) * Math.log10(Math.pow(targetX - this.x, 2))\n        + d * globalSpeedModifier * (velocity[0]);\n    }\n    if (targetY !== this.y) {\n      this.y += Math.sign(targetY - this.y) * Math.log10(Math.pow(targetY - this.y, 2))\n        + d * globalSpeedModifier * (velocity[1]);\n    }\n  }\n\n  public contains = (obj: GameObject, { l, r, t, b }: Bounds = { l: 0, r: 0, t: 0, b: 0 }) => (\n    obj.x + obj.width > this.x - l && obj.x < this.x + this.width + r &&\n    obj.y + obj.height > this.y - t && obj.y < this.y + this.height + b\n  )\n}\n","import GameObject from \"../entities/GameObject\";\nimport Game from \"../Game\";\nimport Viewport from \"../ViewPort\";\n\nexport interface ZoneArgs {\n  x?: number;\n  y?: number;\n  width: number;\n  height: number;\n  game: Game;\n  absolutePosition: boolean;\n}\n\nexport default class Zone {\n  public x: number;\n  public y: number;\n  public width: number;\n  public height: number;\n  public game: Game;\n  public absolutePosition: boolean;\n\n  constructor({ game, x = 0, y = 0, width, height, absolutePosition = false }: ZoneArgs) {\n    this.game = game;\n\n    this.absolutePosition = absolutePosition;\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n\n  public update?(): any;\n\n  public contains = (obj: GameObject) => this.absolutePosition ?\n    (\n      obj.x + obj.width > this.x + this.game.viewport.x && obj.x < this.game.viewport.x + this.x + this.width &&\n      obj.y + obj.height > this.y + this.game.viewport.y && obj.y < this.game.viewport.y + this.y + this.height\n    ) : (\n      obj.x + obj.width > this.x && obj.x < this.x + this.width &&\n      obj.y + obj.height > this.y && obj.y < this.y + this.height\n    )\n}\n","import GameObject from \"../entities/GameObject\";\nimport Game from \"../Game\";\nimport Zone, { ZoneArgs } from \"./Zone\";\n\ntype spawnable = GameObject | GameObject[];\n\nexport interface SpawnZoneArgs extends Pick<ZoneArgs, Exclude<keyof ZoneArgs, \"absolutePosition\">> {\n  spawnRate: number;\n  getSpawnModifier?(game: Game): number;\n  generateSpawn(zone: SpawnZone): spawnable;\n}\n\nexport default class SpawnZone extends Zone {\n  public spawnRate: number;\n  public prevSpawn = 0;\n  public getSpawnModifier: (game: Game) => number;\n  public generateSpawn: (zone: SpawnZone) => spawnable;\n\n  constructor({ spawnRate, generateSpawn, getSpawnModifier = () => 1, ...args }: SpawnZoneArgs) {\n    super({\n      ...args,\n      absolutePosition: true,\n    });\n    this.getSpawnModifier = getSpawnModifier;\n    this.spawnRate = spawnRate;\n    this.generateSpawn = generateSpawn;\n  }\n\n  public update = () => {\n    if (this.game.prevLoop - this.prevSpawn < 1000 / (this.getSpawnModifier(this.game) * this.spawnRate)) {\n      return;\n    }\n    const spawn = this.generateSpawn(this);\n    if (Array.isArray(spawn)) {\n      for (const obj of spawn) {\n        this.spawn(obj);\n      }\n    } else {\n      this.spawn(spawn);\n    }\n    this.prevSpawn = Date.now();\n  }\n\n  private spawn = (obj: GameObject) => {\n    if (this.contains(obj)) {\n      return;\n    }\n    obj.x = this.x + Math.random() * this.width;\n    obj.y = this.y + Math.random() * this.height;\n\n    if (this.absolutePosition) {\n      obj.x += this.game.viewport.x;\n      obj.y += this.game.viewport.y;\n    }\n\n    this.game.addGameObject(obj);\n  }\n}\n","import Meteor from \"../entities/Meteor\";\nimport Game from \"../Game\";\nimport SpawnZone from \"./SpawnZone\";\n\nexport const getMeteorSpawns = (game: Game) => [\n  new SpawnZone({\n    game,\n\n    generateSpawn: () => new Meteor({\n      maxLife: 3 + Math.random() * 10,\n      velocity: [Math.random() * 6 - 3, Math.random() * 1.5 - .75],\n    }),\n    getSpawnModifier: ({ player }) =>\n      .2 + .8 * player.velocity[0] / player.maxVelocity[0],\n    spawnRate: 3.5,\n\n    height: game.canvas.height + 200,\n    width: 150,\n    x: game.canvas.width,\n    y: -100,\n  }),\n  new SpawnZone({\n    game,\n\n    generateSpawn: () => new Meteor({\n      maxLife: 3 + Math.random() * 10,\n      velocity: [Math.random() * 1.5 - .75, Math.random() * 6 - 1.5],\n    }),\n    getSpawnModifier: ({ player }) =>\n      .2 + .8 * Math.min(0, player.velocity[1]) / player.minVelocity[1],\n    spawnRate: 1.5,\n\n    height: 100,\n    width: game.canvas.width,\n    y: -200,\n  }),\n  new SpawnZone({\n    game,\n\n    generateSpawn: () => new Meteor({\n      maxLife: 3 + Math.random() * 8,\n      velocity: [Math.random() * 1.5 - .75, -Math.random() * 6 + 1.5],\n    }),\n    getSpawnModifier: ({ player }) =>\n      .2 + .8 * Math.max(0, player.velocity[1]) / player.maxVelocity[1],\n    spawnRate: 1.5,\n\n    height: 100,\n    width: game.canvas.width,\n    y: game.canvas.height,\n  }),\n];\n","import KeyboardListener from \"./controls/keyboardListener\";\nimport MouseListener from \"./controls/MouseListener\";\nimport GameObject, { GameObjectState } from \"./entities/GameObject\";\nimport Meteor from \"./entities/Meteor\";\nimport Player from \"./entities/Player\";\nimport Projectile from \"./entities/Projectile\";\nimport Weapon from \"./entities/Weapon\";\nimport End from \"./interface/End\";\nimport Overlay from \"./interface/Overlay\";\nimport Pause from \"./interface/Pause\";\nimport UserInterface from \"./interface/UserInterface\";\nimport { sprites } from \"./sprites/Sprite\";\nimport Viewport from \"./Viewport\";\nimport Zone from \"./zones/Zone\";\nimport { getMeteorSpawns } from \"./zones/zones\";\n\nexport interface GameState {\n  score: number;\n  gameObjects: GameObjectState[];\n}\n\nexport default class Game {\n\n  set pause(pause: boolean) {\n    this._pause = pause;\n    if (pause) {\n      this.setOverlay(this.overlays.pause);\n      return;\n    }\n    this.setOverlay(this.overlays.ui);\n  }\n\n  get pause() {\n    return this._pause;\n  }\n  public readonly fps: number = 60;\n\n  public canvas: HTMLCanvasElement;\n  public viewport: Viewport;\n  public loopHandle?: number;\n  public keyboard: KeyboardListener = new KeyboardListener();\n  public mouse: MouseListener = new MouseListener();\n\n  public activeOverlay?: Overlay;\n  public overlays: { [key: string]: Overlay };\n\n  public score: number = 0;\n\n  public prevRender: number = 0;\n  public prevLoop: number = Date.now();\n  public player?: Player;\n\n  public gameObjects: GameObject[] = [];\n\n  public zones: Zone[] = [];\n\n  private _pause = false;\n\n  constructor() {\n    this.canvas = document.createElement(\"canvas\");\n    this.canvas.id = \"game\";\n    this.canvas.width = 500;\n    this.canvas.height = 300;\n\n    parent.postMessage({\n      messageType: \"SETTING\",\n      options: {\n        height: this.canvas.height,\n        width: this.canvas.width,\n      },\n    }, window.location.href);\n\n    this.overlays = {\n      end: new End({\n        game: this,\n      }),\n      pause: new Pause({\n        game: this,\n        onExit: () => this.pause = false,\n      }),\n      ui: new UserInterface({\n        height: this.canvas.height,\n        pause: () => this.pause = true,\n        width: this.canvas.width,\n      }),\n    };\n\n    this.viewport = new Viewport(\n      this.canvas.width,\n      this.canvas.height\n    );\n  }\n\n  public mount = (element: HTMLElement) => {\n    // Clear pre-existing items in the element\n    while (element.firstChild) {\n      element.removeChild(element.firstChild);\n    }\n\n    element.appendChild(this.canvas);\n\n    this.reset();\n\n    this.loopHandle = window.requestAnimationFrame(this.loop); // loop\n\n    // input\n    this.keyboard.mount(); // mount keyboard listener\n    this.mouse.mount(this.canvas.parentNode as HTMLElement); // mount mouse listener\n  }\n\n  public unmount = () => {\n    this.gameObjects.length = 0;\n    if (this.canvas.parentNode) {\n      // input\n      this.keyboard.unmount(); // unmount keyboard listener\n      this.mouse.unmount(this.canvas.parentNode as HTMLElement); // unmount keyboard listener\n\n      while (this.canvas.parentNode.firstChild) {\n        this.canvas.parentNode.removeChild(this.canvas.parentNode.firstChild);\n      }\n    }\n\n    if (this.loopHandle) {\n      window.cancelAnimationFrame(this.loopHandle);\n    }\n  }\n\n  public reset = () => {\n    this.score = 0;\n    this.player = new Player({\n      initialHeight: 20,\n      maxLife: 100,\n      scale: 1.7,\n      sprite: sprites.ship,\n\n      maxVelocity: [15, 15],\n      minVelocity: [0, -15],\n    });\n\n    this.player.weapon = new Weapon({\n      fireRate: 3,\n      offset: [46, 8],\n      projectileSettings: {\n        damage: 2,\n        sprite: sprites.projectile,\n      },\n      ship: this.player,\n    });\n\n    this.viewport.pan(\n      { x: -this.canvas.width / 3, y: this.player.height / 2, velocity: [0, 0] },\n      [-this.canvas.width / 2 + this.player.width, 0],\n      0,\n      true\n    );\n\n    // add initial game objects\n    this.gameObjects = [\n      this.player,\n    ];\n    // add initial spawn zones\n    this.zones = [\n      ...getMeteorSpawns(this),\n    ];\n\n    this.pause = true;\n  }\n\n  public addGameObject = (obj: GameObject) => {\n    this.gameObjects.push(obj);\n  }\n\n  public loop = () => {\n    const time = Date.now();\n    if (time - this.prevRender > 1000 / this.fps) {\n      this.render();\n    }\n    this.update((time - this.prevLoop) / 1000);\n\n    this.prevLoop = time;\n\n    this.loopHandle = window.requestAnimationFrame(this.loop);\n  }\n\n  // Send load request to the parent window as described in the project description\n  public requestLoad = () => {\n    parent.postMessage({\n      messageType: \"LOAD_REQUEST\",\n    }, window.location.href);\n  }\n\n  public load: EventListener = ({ data }: { [key: string]: any }) => {\n    if (typeof data === \"object\") {\n      if (\"messageType\" in data && data.messageType === \"LOAD\") {\n        if (\"gameState\" in data) {\n          this.gameState = data.gameState;\n        }\n      } else if (data.messageType === \"error\") {\n        alert(data.info || \"Error loading game state\");\n      }\n    }\n  }\n\n  // Send save request to the parent window as described in the project description\n  public save = () => {\n    parent.postMessage({\n      messageType: \"SAVE\",\n\n      gameState: this.gameState,\n    }, window.location.href);\n  }\n\n  set gameState(state: GameState) {\n    this.reset();\n    this.score = state.score;\n\n    // populate gameObjects\n    state.gameObjects.map((obj) => {\n      if (obj.type === Player.prototype.constructor.name) {\n        const player = this.player as Player;\n        player.state = obj;\n\n        this.viewport.pan(\n          { x: player.x - this.canvas.width / 3, y: player.y + player.height / 2, velocity: [0, 0] },\n          [-this.canvas.width / 2 + player.width, 0],\n          0,\n          true\n        );\n      } else if (obj.type === Projectile.prototype.constructor.name) {\n        this.gameObjects.push(new Projectile(obj));\n      } else {\n        this.gameObjects.push(new Meteor(obj));\n      }\n    });\n  }\n\n  get gameState(): GameState {\n    return {\n      gameObjects: this.gameObjects.map((obj) => obj.state),\n      score: this.score,\n    };\n  }\n\n  public render = (\n    ctx = this.canvas.getContext(\"2d\") as CanvasRenderingContext2D,\n    viewport = this.viewport\n  ) => {\n    this.prevRender = Date.now();\n\n    ctx.clearRect(0, 0, this.viewport.width, this.viewport.height); // clear canvas before re-render\n    for (const obj of this.gameObjects) { // loop and render all game objects\n      if (obj && this.viewport.contains(obj)) {\n        obj.render(ctx, viewport);\n      }\n    }\n\n    if (this.activeOverlay) {\n      const state = {\n        score: this.score,\n      };\n      if (this.player) {\n        Object.assign(state, {\n          life: this.player.life,\n          maxLife: this.player.maxLife,\n          velocity: this.player.velocity,\n          x: this.player.x,\n          y: this.player.y,\n        });\n      }\n      this.activeOverlay.render(state);\n    }\n  }\n\n  public update = (d: number) => {\n    if (this.activeOverlay && this.activeOverlay.update) {\n      this.activeOverlay.update({ mouse: this.mouse, keyboard: this.keyboard });\n    }\n\n    if (this._pause) { // Don't update the game if it has been paused\n      return;\n    }\n\n    for (const zone of this.zones) {\n      if (zone.update) {\n        zone.update();\n      }\n    }\n\n    if (this.player) {\n      this.viewport.pan(\n        this.player,\n        [\n          -this.canvas.width / 2 - this.player.acceleration[0] * 20 - this.player.width * .5,\n          -(this.player.acceleration[1]) * 40 + this.player.height / 2,\n        ],\n        d\n      );\n    }\n\n    let i = this.gameObjects.length;\n    while (i--) {\n      if (this.viewport.contains(this.gameObjects[i], { l: 0, t: 200, b: 200, r: 200 })) {\n        this.gameObjects[i].update(d, this, i);\n      } else {\n        this.gameObjects.splice(i, 1); // delete object from game (not in bounds)\n      }\n    }\n  }\n\n  public setOverlay = (overlay: Overlay) => {\n    this.clearOverlay();\n    this.activeOverlay = overlay;\n    if (this.canvas.parentNode) {\n      this.canvas.parentNode.appendChild(this.activeOverlay.canvas);\n    }\n  }\n\n  private clearOverlay = () => {\n    if (this.canvas.parentNode) {\n      const overlay = document.getElementById(\"overlay\");\n      if (overlay) {\n        this.canvas.parentNode.removeChild(overlay); // remove overlay canvas\n      }\n    }\n  }\n}\n","import Game from \"./Game\";\n\n(() => {\n  const game = new Game();\n\n  window.removeEventListener(\"message\", game.load); // for development\n  window.addEventListener(\"message\", game.load, false);\n\n  game.unmount(); // for development\n  game.mount(document.getElementById(\"game-container\") as HTMLElement);\n})();\n"]}